'use strict'
var http = require('http')

const Telegraf = require('telegraf')
const Markup = require('telegraf/markup')
const Extra = require('telegraf/extra')
const axios = require('axios')

var datacompleta = new Date();
var datahora = datacompleta.getHours();
var datadia = datacompleta.getDate();
var datames = (datacompleta.getMonth()+1);
var dataano = datacompleta.getFullYear();
var datadata = (datacompleta.getDate()+'/'+(datacompleta.getMonth()+1)+'/'+datacompleta.getFullYear());

var debug = false


// Data de nascimento do bot: 17/09/2018

// Chamadas para o Local
	const env = require('./.env')
	const bot = new Telegraf(env.token)

	const apiUrl = env.apiUrl
	const apiFileUrl = env.apiFileUrl

	const idKiliano = env.idKiliano
	const idBartira = env.idBartira
	const idChatDegrau = env.idChatDegrau
	const idChatFronts = env.idChatFronts

	const idTodos = env.idTodos


// Chamadas para o Heroku
	// 		setTimeout(function(){
	// 			http.get("http://shielded-peak-24448.herokuapp.com/")
	// 			console.log(datahora-3)
	// 		 },1350000);

	// 		setInterval(function(){ 
	// 			var datacompleta = new Date();
	// 			let datahora = ((datacompleta.getHours()));
	// 			if (datahora < 19+3) {
	// 				setTimeout(function(){
	// 					http.get("http://shielded-peak-24448.herokuapp.com/")
	// 					console.log(datahora-3)
	// 				 },750000);

	// 				setTimeout(function(){
	// 					http.get("http://shielded-peak-24448.herokuapp.com/")
	// 					console.log(datahora-3)
	// 				 },1350000);
	// 			}
	// 		}, 2400000);


	// var port = (process.env.PORT || 5000)

	// http.createServer(function(request, response) {
	// 	response.writeHead(200,{'Content-Type': 'application/json'});
	// 	response.write(JSON.stringify({name: 'tiodopaobot', ver: '0.1'}));
	// 	response.end();
	// }).listen(port)

	// const token = process.env.token

	// const idKiliano = process.env.idKiliano
	// const idBartira = process.env.idBartira
	// const idChatDegrau = process.env.idChatDegrau
	// const idChatFronts = process.env.idChatFronts

	// const idTodos = process.env.idTodos

	// const apiUrl = `https://api.telegram.org/bot${token}`
	// const apiFileUrl = `https://api.telegram.org/file/bot${token}`

	// const bot = new Telegraf(token)



// C√≥digo

let random = Math.floor((Math.random() * 23) + 1)
let ultimorandom = random
// Pedido

var pedido = {
		"dia_data": datadia,
		"mes_data": datames,
		"ano_data": dataano,
		"acoes": [],
		"indisponibilidade": [],
		"lista": [],
		"paofrances":0,
		"paodemilho":0,
		"rosquinha":0,
		"rosquinharecheio":0,
		"croissantpresunto":0,
		"croissantfrango":0,
		"bisnaga":0,
		"bisnagaacucar":0,
		"bisnagacreme":0,
	};

console.log(pedido);


// Vari√°veis do pedido

// mensagem
const msg = (msg, id) => {
	axios.get(`${apiUrl}/sendMessage?chat_id=${id}&text=${encodeURI(msg)}`)
		.catch(e => console.log(e))
}

// Come√ßando o dia
const novodia = () => {

	// Hor√°rio
	datacompleta = new Date();
	datahora = datacompleta.getHours();
	datadia = datacompleta.getDate();
	datames = (datacompleta.getMonth()+1);
	dataano = datacompleta.getFullYear();
	datadata = (datacompleta.getDate()+'/'+(datacompleta.getMonth()+1)+'/'+datacompleta.getFullYear());


	// Zerando pedido do dia
	pedido = {
		"dia_data": datadia,
		"mes_data": datames,
		"ano_data": dataano,
		"acoes": [],
		"indisponibilidade": [],
		"lista": [],
		"paofrances":0,
		"paodemilho":0,
		"rosquinha":0,
		"rosquinharecheio":0,
		"croissantpresunto":0,
		"croissantfrango":0,
		"bisnaga":0,
		"bisnagaacucar":0,
		"bisnagacreme":0,
	};
}


// Reset
const resetSimples = () => {
	// lista
	pedido.lista =[]
	pedido.paofrances = 0
	pedido.paodemilho = 0
	pedido.rosquinha = 0
	pedido.rosquinharecheio = 0
	pedido.croissantpresunto = 0
	pedido.croissantfrango = 0
	pedido.bisnaga = 0
	pedido.bisnagaacucar = 0
	pedido.bisnagacreme = 0
}

// Montando lista de pedidos
const listar = () => {
	resetSimples()

	
	pedido.lista = [];

	// Gerando lista de nomes
	if (pedido.paofrances == 1) {
		pedido.lista.push(' \n'+pedido.paofrances+' P√£o Franc√™s')
	}

	if (pedido.paofrances > 1) {
		pedido.lista.push(' \n'+pedido.paofrances+' P√£es Franceses')
	}

	if (pedido.paodemilho == 1) {
		pedido.lista.push(' \n'+pedido.paodemilho+' P√£o de Milho')
	}

	if (pedido.paodemilho > 1) {
		pedido.lista.push(' \n'+pedido.paodemilho+' P√£es de Milho')
	}

	if (pedido.rosquinha == 1) {
		pedido.lista.push(' \n'+pedido.rosquinha+' Rosquinha Comum')
	}

	if (pedido.rosquinha > 1) {
		pedido.lista.push(' \n'+pedido.rosquinha+' Rosquinhas Comuns')
	}

	if (pedido.rosquinharecheio == 1) {
		pedido.lista.push(' \n'+pedido.rosquinharecheio+' Rosquinha com Recheio')
	}

	if (pedido.rosquinharecheio > 1) {
		pedido.lista.push(' \n'+pedido.rosquinharecheio+' Rosquinhas com Recheio')
	}

	if (pedido.croissantpresunto == 1) {
		pedido.lista.push(' \n'+pedido.croissantpresunto+' Croissant de Presunto')
	}

	if (pedido.croissantpresunto > 1) {
		pedido.lista.push(' \n'+pedido.croissantpresunto+' Croissants de Presunto')
	}

	if (pedido.croissantfrango == 1) {
		pedido.lista.push(' \n'+pedido.croissantfrango+' Croissant de Frango')
	}

	if (pedido.croissantfrango > 1) {
		pedido.lista.push(' \n'+pedido.croissantfrango+' Croissants de Frango')
	}

	if (pedido.bisnaga == 1) {
		pedido.lista.push(' \n'+pedido.bisnaga+' Bisnaga Comum')
	}

	if (pedido.bisnaga > 1) {
		pedido.lista.push(' \n'+pedido.bisnaga+' Bisnagas Comuns')
	}

	if (pedido.bisnagaacucar == 1) {
		pedido.lista.push(' \n'+pedido.bisnagaacucar+' Bisnaga com A√ß√∫car')
	}

	if (pedido.bisnagaacucar > 1) {
		pedido.lista.push(' \n'+pedido.bisnagaacucar+' Bisnagas com A√ß√∫car')
	}

	if (pedido.bisnagacreme == 1) {
		pedido.lista.push(' \n'+pedido.bisnagacreme+' Bisnaga com Creme')
	}

	if (pedido.bisnagacreme > 1) {
		pedido.lista.push(' \n'+pedido.bisnagacreme+' Bisnagas com Creme')
	}

	
}



// Teclados

// Pedido em mensagem direta
const tecladoPao = Markup.keyboard([
	['üçû P√£o Franc√™s', 'üåΩ P√£o de Milho'],
	['üç© Rosquinha', 'üç© com Recheio'],
	['ü•ê Croissant Presunto', 'ü•ê Croissant Frango'],
	['ü•ñ Bisnaga','ü•ñ com A√ß√∫car','ü•ñ com Creme'],
	['‚ùåN√£o quero pedir p√£o‚ùå']

]).resize().oneTime().extra()


const tecladoSegunda = Markup.keyboard([
	['‚ùåN√£o quero uma segunda op√ß√£o‚ùå'],
	['üçû P√£o Franc√™s.', 'üåΩ P√£o de Milho.'],
	['üç© Rosquinha.', 'üç© com Recheio.'],
	['ü•ê Croissant Presunto.', 'ü•ê Croissant Frango.'],
	['ü•ñ Bisnaga.','ü•ñ com A√ß√∫car.','ü•ñ com Creme.']

]).resize().oneTime().extra()

const tecladoRemover = Markup.keyboard([
	['‚ùå P. Franc√™s', '‚ùå P. Milho'],
	['‚ùå Rosquinha', '‚ùå Ros. com Recheio'],
	['‚ùå Croissant Presunto', '‚ùå Croissant Frango'],
	['‚ùå Bisnaga','‚ùå Bis. A√ß√∫car,','‚ùå Bis. Creme']

]).resize().oneTime().extra()

const tecladoFinal = Markup.keyboard([
	['üòã Quero pedir mais um p√£o'],
	['üëç T√¥ satisfeito tio!'],

]).resize().oneTime().extra()


const tecladoBranco = Markup.keyboard([
	['üëç Valeu Tio!']

]).resize().oneTime().extra()




// In√≠cio do dia
novodia();


// Cria√ß√£o de comandos

bot.command(['pao','Pao'], async ctx => {
	await ctx.replyWithMarkdown(`*üì£üì£üì£ Hora do P√£o Cambada!!! üì£üì£üì£*`)
	msg(`üì£üì£üì£ O pedido do P√£o est√° aberto! üì£üì£üì£ \n S√≥ clicar ou digitar /pedir para pedir o p√£o`, idKiliano)


})

bot.command(['pedir'], async ctx => {
	await ctx.replyWithMarkdown(`Escolha seu p√£ozinho`, tecladoPao)

})


// Ouvindo o pedido
bot.hears(['üçû P√£o Franc√™s', 'üåΩ P√£o de Milho', 'üç© Rosquinha', 'üç© com Recheio','ü•ê Croissant Presunto', 'ü•ê Croissant Frango','ü•ñ Bisnaga','ü•ñ com A√ß√∫car','ü•ñ com Creme','üçû P√£o Franc√™s', 'üåΩ P√£o de Milho', 'üç© Rosquinha', 'üç© com Recheio','ü•ê Croissant Presunto', 'ü•ê Croissant Frango','ü•ñ Bisnaga','ü•ñ com A√ß√∫car','ü•ñ com Creme'], async ctx => {
	await ctx.replyWithMarkdown(`Anotei seu pedido üòä \n*Caso n√£o tenha ${ctx.update.message.text}, voc√™ quer que pe√ßa outra coisa?*`, tecladoSegunda)

	var nome = ctx.update.message.from.first_name
	nome.replace(":", " ")
	pedido.acoes.push(ctx.update.message.from.id+' : '+nome+' : pediu : '+ctx.update.message.text)
	console.log(pedido.acoes)
})


// Selecionado uma segunda op√ß√£o

bot.hears(['‚ùåN√£o quero uma segunda op√ß√£o‚ùå'], async ctx => {
	await ctx.reply(`Beleza üòä. Anotei seu pedido. Quer mais algo? `, tecladoFinal)

})



bot.hears(['üçû P√£o Franc√™s.', 'üåΩ P√£o de Milho.', 'üç© Rosquinha.', 'üç© com Recheio.','ü•ê Croissant Presunto.', 'ü•ê Croissant Frango.','ü•ñ Bisnaga.','ü•ñ com A√ß√∫car.','ü•ñ com Creme.'], async ctx => {

	// Estrutura do pedido id[0] : nome[1] : pediu[2] : produto[3]

	var acaoitemoriginal = "";

	if (pedido.acoes.length > 0) {

		for (var i = pedido.acoes.length; i > 0; i--) {

			var acaoatual = pedido.acoes[i-1].split(' : ');

			if (acaoatual[0] == ctx.update.message.from.id && acaoatual[2] == 'pediu' ) {
				acaoitemoriginal = acaoatual[3];
				i = 0;
			} else {
			}
		}
	}
	
	// Estrutura da troca id[0] : nome[1] : trocou[2] : produto original[3] : por[4] : produto trocado[5]
	var nome = ctx.update.message.from.first_name
	nome.replace(":", " ")
	pedido.acoes.push(ctx.update.message.from.id+' : '+nome+' : trocou : '+acaoitemoriginal+' : por : '+ctx.update.message.text)
	console.log(pedido.acoes)

	await ctx.reply(`Ok! Caso n√£o tenha ${acaoitemoriginal}, vou trazer ${ctx.update.message.text} Mais alguma coisa? `, tecladoFinal)
})

// Removendo um pedido
bot.hears(['‚ùå Cancelar meus Pedidos ‚ùå'], async ctx => {

	if (pedido.acoes.length > 0) {
		for (var i = pedido.acoes.length - 1; i >= 0; i--) {

			var acaoatual = pedido.acoes[i].split(' : ');

			console.log("avaliando item "+i);

			console.log('Compara√ß√£o de ids '+acaoatual[0]+' == '+ctx.update.message.from.id);
			if(acaoatual[0] == ctx.update.message.from.id) {
		        pedido.acoes.splice(i, 1);

		        i = pedido.acoes.length;
		        console.log("igual! apagando");
		    } else {
		    	console.log("apagando");
		    }
		}
	}


	await ctx.replyWithMarkdown(`*Todos os seus pedidos foram removidos*`, tecladoSegunda);

	console.log(pedido.acoes);
})




// Finalizando pedido particular
bot.hears(['üòã Quero pedir mais um p√£o'], async ctx => {
	await ctx.replyWithMarkdown(`T√° com fome ein? Pede a√≠ ‚úåÔ∏è `, tecladoPao)
})


bot.hears(['üëç T√¥ satisfeito tio!'], async ctx => {
	await ctx.reply(`√â n√≥iz üëç`)
})


bot.command('lista', async ctx => {
	listar();
	await ctx.reply("Pedidos: "+lista+" ")
})

bot.command('remover', async ctx => {
	await ctx.reply("Escolha o que voc√™ quer remover da lista", tecladoRemover)
})

// Conclu√≠ndo pedido

bot.command(['pedido', 'fechar', 'finalizar', 'fecharpedido'], async ctx => {

		listar()

		await ctx.replyWithMarkdown(`*üìùüìù Pedidos pro Tio do P√£o üìùüìù*`)

		await ctx.reply("Pedido: "+pedido.lista+"", tecladoBranco)

		msg(`N√£o esquece de mandar um /bartira pra gravar o √∫ltimo pedido`, idKiliano)
})



// bot.command(['/bartira'], async ctx => {
// 	if (debug == false) {
// 		msg(`√öltimo pedido feito :\n\n ${datadata} \n ${listaanterior}`, idKiliano)

// 		msg(`Oi Bartira, o √∫ltimo pedido feito hoje foi:\n\n ${datadata} \n ${listaanterior}`, idBartira)
// 	}
// })







bot.command('wifi', async ctx => {
	await ctx.replyWithMarkdown(`A senha do wifi *DPI_VISITANTE* √© *opedroaindanaoacessa*`)
})

bot.command(['help', 'ajuda'], async ctx => {
	await ctx.reply(`
		/pao para iniciar um pedido
		/pedido para finalizar um pedido
		/quem mostra quem pediu o que no √∫ltimo pedido
		/cancelar para carregar o menu de subtra√ß√£o de itens
		/lista para carregar a lista de itens pedidos no momento
		/total para o tio falar quantos pedidos e p√£es j√° foram feitos desde a √∫ltima vez que ele foi ligado
		`)

})


bot.command('id', async ctx => {
	await ctx.reply(`Oi ${ctx.update.message.from.first_name}, seu id √© ${ctx.update.message.from.id}. O id do chat √© ${ctx.chat.id}. Essa √© uma info meio sens√≠vel, melhor apagar essa mensagem depois. `)
})

bot.command('msg', async ctx => {
	if (ctx.update.message.from.id == idKiliano) {

		var mimic = ctx.update.message.text

		var destino = mimic.split(/\s+/).slice(1,2);

		var mimic = mimic.replace("/msg", "");
		
		var mimic = mimic.replace(destino, "");

		if (destino == "grupo" ) {
			msg(mimic, idChatDegrau)
		} else {
			if (destino == "kiliano" ) {
				msg(mimic, idKiliano)
			} else {
				if (destino == "bartira" ) {
					msg(mimic, idBartira)
				} else {

					if (destino == "fronts" ) {
						msg(mimic, idChatFronts)
					} else {
						await ctx.reply(`Mensagem - ${mimic} - n√£o pode ser entregue porque o destino n√£o foi especificado.
							Atuais cadastrados: grupo, kiliano, bartira
						`)
					}
				}
			}

			
		}
	}
})



// Start

bot.start(async ctx => {
	await ctx.reply(`Oi! üòÄ`);
	if (ctx.chat.id != idChatDegrau) {
		msg(`${ctx.update.message.from.first_name} come√ßou a conversar com o Hor√°cio. O ID dele √© ${ctx.update.message.from.id} `, idKiliano)
	}
})





// TESTES

bot.command('teste', async ctx => {
	console.log(pedido.acoes);
	await ctx.reply(`Testado`);

})

// Teste com o Open Weather







// / C√≥digo

// Loop
bot.startPolling()